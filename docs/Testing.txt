Prerequirements
	Unit Testing:
		None
	Integration / Functional Test
		SQL Server Express, likely installed with Visual Studio

Run:
	Run directly from Test Explorer

Clean Up
	Even Integration / Functional Testing use SQLServer express In Memory DB, a pair of DB files still are created under C:\Users\[Username]\. Those files could be manually deleted, if cleanup isn't executed.


Two approaches:

There are two approaches of implementing Integration and Functional testing. One approach uses WebApplicationFactory<TStartUp>, while the other approach create TestServer on its own.

I personal like the second approach. There are a few reasons
1. The second approach is straight forward, whereas the first is a blackbox solution.
2. In WebApplicationFactory, the whole test class likely shares the same database across all test cases in the same test classes. Any individual test case potentially pollutes the whole test environment, the later test cases may fail by previous testings. Of course, there are some workarounds. But all workarounds increase complexity unnecessarily. 
3. Sharing the same database means running tests in parallel doesn't support. 

References:

Integration Testing Update in Asp.Net Core 2.1
https://docs.microsoft.com/en-us/aspnet/core/test/integration-tests?view=aspnetcore-2.1


Notes:
	1. Demo purpose only, therefore a few tests are provided.
	2. Integration / Functional Testing 
		2.1 All tests can have its own separate setting, in settings.json.
		2.2 Every test recreate database and remove it after testing, so every test won't pollute each other. 
		2.4 As every setup has to setup the whole web host stack, database in every test case, a individual test expectedly runs longer.